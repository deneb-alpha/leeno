<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Cerca_Rior" script:language="StarBasic">rem ***** BASIC *****
&apos;_______________________________________________________________________________________ 		
&apos; LeenO - Computo Metrico
&apos; Template assistito per la compilazione di Computi Metrici Estimativi 				
&apos;..._ Copyright (C) Bartolomeo Aimar - Giuseppe Vizziello - supporto@leeno.org
&apos; Licenza LGPL  2.1 https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html					
&apos; Il codice contenuto in questo modulo è parte integrante dell&apos;estensione LeenO 
&apos; Vi sarò grato se vorrete segnalarmi i malfunzionamenti (veri o presunti)
&apos; Sono inoltre graditi suggerimenti in merito alle gestione della Contabilità Lavori e 
&apos; per l&apos;ottimizzazione del codice.
&apos;_______________________________________________________________________________________

Sub Riordina_ElencoPrezzi &apos;Riordina l&apos;elenco prezzi secondo codice prezzo
&apos;seleziona_area (&quot;elenco_prezzi&quot;)
RiDefinisci_Area_Elenco_prezzi
	oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;) 
	oRanges = ThisComponent.NamedRanges
&apos;xray 	oRanges.getByName(&quot;elenco_prezzi&quot;).getReferredCells().RangeAddress
	With oRanges.getByName(&quot;elenco_prezzi&quot;).getReferredCells().RangeAddress
		SR = .StartRow+1
		ER = .EndRow-1
		SC = .StartColumn
		EC = .EndColumn
	End With
	ThisComponent.CurrentController.Select(oSheet.GetCellRangeByPosition(SC, SR, EC, ER))
	ordina_col(SC+1)
		unSelect &apos;unselect ranges
End Sub

Sub Riordina_ElencoPrezzi_D (optional sRitorno) &apos;Riordina l&apos;elenco prezzi secondo codice prezzo
	&apos;_____________________
	chiudi_dialoghi &apos; chiude tutti i dialoghi
	&apos;_____________________ &apos;perbacco
	lrow= Range2Cell &apos; queste 4 righe per ridurre a cella iniziale una eventuale 
	if lrow = -1 then exit Sub
	oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;) 
	
	Barra_chiudi_sempre_4
	Barra_Apri_Chiudi_5(&quot;Riordino l&apos;Elenco Prezzi... ma se mi leggi vuol dire che è cosa lunga...&quot;, 25)
 	
 	lcolbase = Colonna_giusta_EP (oSheet)
 	if lcolbase = &quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; then
				print lcolbase
				exit sub
	end if
 			
&apos;	oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;)
RiDefinisci_Area_Elenco_prezzi

	oRangeEP = ThisComponent.NamedRanges.getByName(&quot;elenco_prezzi&quot;).getReferredCells.RangeAddress

	lrowEPI = oRangeEP.StartRow+1
	lrowEPF = oRangeEP.EndRow-1
	lcolEPI = oRangeEP.StartColumn
	lcolEPF = oRangeEP.EndColumn
	
	If lrowEPI &gt; lrowEPF Then GoTo fine:
	If lrowEPF = lrowF Then lrowEPF=lrowF-1
&apos;On Error Resume Next 
	ThisComponent.CurrentController.Select(oSheet.GetCellRangeByPosition(lcolEPI,lrowEPI,lcolEPF,lrowEPF))
	
ordina_col (lcolEPI+1)
	unSelect &apos;unselect ranges
&apos;	Print idxcol
&apos;	Print idxrow
fine:
fissa (0,idxrow+1)
	Barra_chiudi_sempre_4
End Sub


Function Riordina_0 (ColdaRior, AscDesc as boolean )as variant &apos; Riordina l&apos;elenco prezzi con criteri
&apos;Ritorna la riga finale 										 a scelta... (si usa richiamata da altra sub)
rem manomessa 	Giuseppe Vizziello 2014
 dim lrowF as long
oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;)
&apos;circoscrive l&apos;elenco
	sString$ = &quot;Fine elenco&quot;
	oEnd=uFindString(sString$, oSheet) 
	If isNull (oEnd) or isEmpty (oEnd) then &apos;11111
		msgbox &quot; Probabilmente manca la riga rossa di chiusura della tabella! Controlla e PROVVEDI21! (Ctrl-Alt-P) &quot;
		ThisComponent.CurrentController.Select(oCell)
		Riordina_0 = &quot;uscita forzata&quot;
		exit FUNCTION
	end if 
	
	lrowF=oEnd.RangeAddress.EndRow 
	&apos;	lcolF=oEnd.RangeAddress.EndColumn
	lcolbase = Colonna_giusta_EP(osheet)
	if lcolbase = &quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; then
				Riordina_0 = lcolbase
				exit function
	end If
 oRanges = ThisComponent.NamedRanges
&apos;RiDefinisci_Area_Elenco_prezzi
&apos;seleziona_area (&quot;elenco_prezzi&quot;)
&apos; Print minghia
&apos;ordina_col (1)
Riordina_ElencoPrezzi_D
unSelect &apos;unselect ranges 	
	Riordina_0 = lrowF
End Function 

sub cella_cella() &apos; passa cella per cella e copiando dati (o altro) da una sheet ad un&apos;altra 
&apos; nome sheet sorgente: lo stesso con aggiunto un suffisso &quot;_2&quot;
 Dim nCurCol As Integer
 Dim nCurRow As Integer
 Dim nEndCol As Integer
 Dim nEndRow As Integer
 Dim oCell As Object
 Dim oCursor As Object
 Dim aAddress As Variant
 Dim sFind As String

oSheetDest = ThisComponent.currentController.activeSheet
oSheetsrc = ThisComponent.Sheets.getByName((ThisComponent.currentcontroller.activesheet.name &amp; &quot;_2&quot;)
&apos;xray oSheetsrc
&apos;exit sub
 oCell = oSheetsrc.GetCellbyPosition( 0, 0 )
 oCursor = oSheetsrc.createCursorByRange(oCell)
 oCursor.GotoEndOfUsedArea(True)
 aAddress = oCursor.RangeAddress
 
&apos; nEndRow = aAddress.EndRow &apos;DEFINIRE QUI IL RANGE
 nEndRow = 929					&apos;DEFINIRE QUI IL RANGE
 &apos; nEndCol = aAddress.EndColumn &apos;DEFINIRE QUI IL RANGE
 nEndCol = 9					&apos;DEFINIRE QUI IL RANGE
 Clessid_lock_Start
&apos;Barra_Apri_Chiudi_4
 For nCurCol = 0 To nEndCol &apos;Go through the range column by column,
 For nCurRow = 0 To nEndRow &apos;row by row.
 oCellSRC = oSheetSRC.GetCellByPosition( nCurCol, nCurRow )
 lcolorSRC=oCellSRC.Cellbackcolor
 lCharColorSRC=oCellSRC.CharColor
 &apos; xray oCellSRC
 oCellDest = oSheetDest.GetCellByPosition( nCurCol, nCurRow )
 oCellDest.Cellbackcolor = lcolorSRC 
 oCellDest.CharColor = lCharColorSRC 
 &apos; CharColor 
 &apos; sFind = oCell.String &apos;Get cell contents.
 &apos; If sFind = sString then
 &apos; uFindString = oCell
 &apos; Exit sub
 &apos; End If
 Next
 Next
 Clessid_lock_End
 &apos; oProgressbar.End
 msgbox &quot;Finito!&quot;
End Sub

rem Return the cell that contains the text
Function uFindString(sString$, oSheet ) As Variant &apos; richiamata da diverse cose
	Dim nCurCol As Integer
	Dim nCurRow As Integer
	Dim nEndCol As Integer
	Dim nEndRow As Integer
	Dim oCell As Object
	Dim oCursor As Object
	Dim aAddress As Variant
	Dim sFind As String
	rem oSheet = ThisComponent.Sheets.getByName(&quot;COMPUTO&quot;)
	rem sString = &quot;TOTALI COMPUTO&quot;
	oCell = oSheet.GetCellbyPosition(0,0)
	oCursor = oSheet.createCursorByRange(oCell)
	oCursor.GotoEndOfUsedArea(True)
	aAddress = oCursor.RangeAddress
	nEndRow = aAddress.EndRow
	nEndCol = aAddress.EndColumn
	For nCurCol = 0 To nEndCol &apos;Go through the range column by column
		For nCurRow = 0 To nEndRow &apos;row by row.
			&apos;oCell = oSheet.GetCellByPosition( nCurCol, nCurRow )
			&apos;sFind = oCell.String &apos;Get cell contents.
			&apos;If inStr(sFind, sString$) Then
			If inStr (oSheet.GetCellByPosition(nCurCol, nCurRow).String , sString$) then
						 uFindString = oSheet.GetCellByPosition(nCurCol, nCurRow)
					 Exit Function
			End If
		Next
	Next
End Function


&apos;Function uFindString(sString$, oSheet) As Variant &apos; richiamata da diverse cose
Function uFindString_1 (sString$ , oSheet , lcol) As Variant &apos;
 Dim nCurCol As Integer
 Dim nCurRow As Integer
 Dim nEndCol As Integer
 Dim nEndRow As Integer
 Dim oCell As Object
 Dim oCursor As Object
 Dim aAddress As Variant
 Dim sFind As String
&apos;print sString
 if isMissing (lcol) then
	 lcol = 0
 end if

 			
 oCell = oSheet.GetCellbyPosition( 0, 0 )
 oCursor = oSheet.createCursorByRange(oCell)
 oCursor.GotoEndOfUsedArea(True)
 aAddress = oCursor.RangeAddress
 nEndRow = aAddress.EndRow
 nEndCol = lcol
&apos;print nEndRow
 For nCurCol = 0 To nEndCol &apos;Go through the range column by column,
 For nCurRow = 0 To nEndRow &apos;row by row.
 oCell = oSheet.GetCellByPosition( nCurCol, nCurRow )
 sFind = oCell.String &apos;Get cell contents.
 If sFind = sString then
 		 uFindString_1 = oCell
 	 Exit Function
 &apos; else 
 &apos;	uFindString = &quot;nulla&quot;
 End If
 Next
 Next
End Function



rem Return the cell that contains the text
Sub SearchARange &apos; questa mi sembra meglio...
 rem Author: Andrew Pitonyak
	 Dim oSheet
	 Dim oRange
	 Dim oFoundCell
	 oSheet = ThisComponent.getSheets().getByIndex(0)
&apos;	 oRange = oSheet.getCellRangeByName(&quot;a2:a19&quot;)
	 oRange = oSheet.getCellRangeByPosition(0,0,0,5000) 
	 sString$ = &quot;E-1&quot;
&apos;	 oFoundCell = SimpleSheetSearch(sString$, oRange, False)
	 ThisComponent.CurrentController.Select(oFoundCell)
END SUB

&apos; questa ancora meglio_ Cerca nel range predefinito
Function SimpleSheetSearch(sString$, oSheet, nStartCol, nStartRow, nEndCol, nEndRow, bWholeWord As Boolean) As Variant
 Dim oDescriptor
 Dim oFound
 if isMissing ( bWholeWord) then
 	 bWholeWord = true
 end if
 rem Create a descriptor from a searchable document.
 oDescriptor = oSheet.createSearchDescriptor()
 rem Set the text for which to search and other 
 rem http://api.openoffice.org/docs/common/ref/com/sun/star/util/SearchDescriptor.html 
 &apos;xray oDescriptor
 With oDescriptor
 .SearchString = sString$
 rem These all default to false
 rem SearchWords forces the entire cell to contain only the search string
 .SearchWords = bWholeWord
&apos; .SearchWords = true
 .SearchCaseSensitive = False
 End With
 &apos; xray oDescriptor
 rem Find the first one
 oFound = oSheet.findFirst(oDescriptor)
 SimpleSheetSearch = oFound
 &apos;xray ofound
 rem Do you really want to find more instances
 rem You can continue the search using a cell if you want!
 &apos;Do While Not IsNull(oFound)
 &apos; Print oFound.getString()
 &apos; oFound = oSheet.findNext( oFound, oDescriptor)
 &apos;Loop
End Function
&apos;=================================================================================


Sub RiDefinisci_Area_Elenco_prezzi () &apos; viene richiamata da Riordina l&apos;elenco Prezzi
rem riscritta (c) Giuseppe Vizziello 2014
&apos; Nel Computo si è scelto di usare un namedRanges per il VlookUp... a false, eppure ci sono casi in cui 
&apos; è necessario riordinare (???)
&apos; IMPORTANTE ridefinisce anche il namedRanges che contiene la lista dei codici interni di comodo

dim lRow as Long

dim oSheet as Object

	oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;)
rem ----------------------------------------------------------------------
rem prima riga
	oEnd=uFindString((&quot;DESCRIZIONE DEI LAVORI&quot; &amp; chr$(10) &amp; &quot;E DELLE SOMMINISTRAZIONI&quot;), oSheet)
	fRow=oEnd.RangeAddress.EndRow+1
rem ----------------------------------------------------------------------
rem ultima riga
&apos;	oEnd=uFindString(&quot;Fine elenco&quot;, oSheet)
&apos;	lRowE=oEnd.RangeAddress.EndRow
	lRowE=cerca_riga_rossa (&quot;Elenco Prezzi&quot;)+1
rem ----------------------------------------------------------------------
rem nome ultima colonna

	lCol = ColumnNameOf(getLastUsedCol(oSheet)+2) &apos; aggiungo 3 colonne in più... non si sa mai
	ScriptPy(&quot;pyleeno.py&quot;,&quot;rifa_nomearea&quot;, &quot;Elenco Prezzi&quot;, &quot;$A$&quot;&amp; fRow &amp;&quot;:$&quot;&amp; lCol &amp;&quot;$&quot;&amp; lRowE, &quot;elenco_prezzi&quot;)
	ScriptPy(&quot;pyleeno.py&quot;,&quot;rifa_nomearea&quot;, &quot;Elenco Prezzi&quot;, &quot;$A$&quot;&amp; fRow &amp;&quot;:$A$&quot;&amp; lRowE, &quot;Lista&quot;) &apos;codici
END SUB 



Function Colonna_giusta_EP (oSheet as object)

&apos; questa invece trova automaticamente la colonna giusta (+col)

 if oSheet.getCellByPosition(1,0).string = &quot; Descrizione &quot; or _
 	oSheet.getCellByPosition(1,0).string = &quot;Descrizione &quot; or _
 	oSheet.getCellByPosition(1,0).string = &quot;Descrizione&quot; then
 	lcolbase = 0
 end if
 if oSheet.getCellByPosition(2,0).string = &quot; Descrizione &quot; or _
 	oSheet.getCellByPosition(2,0).string = &quot;Descrizione &quot; or _
 	oSheet.getCellByPosition(2,0).string = &quot;Descrizione&quot; then
 	lcolbase = 1
 end if
 if oSheet.getCellByPosition(3,0).string = &quot; Descrizione &quot; or _
 	oSheet.getCellByPosition(3,0).string = &quot;Descrizione &quot; or _
 	oSheet.getCellByPosition(3,0).string = &quot;Descrizione&quot; then
 	lcolbase = 2
 end if
 if oSheet.getCellByPosition(4,0).string = &quot; Descrizione &quot; or _
 	oSheet.getCellByPosition(4,0).string = &quot;Descrizione &quot; or _
 	oSheet.getCellByPosition(4,0).string = &quot;Descrizione&quot; then
 	lcolbase = 3
 end if
 &apos; print lcolbase
 if lcolbase &lt;= 3 then
 			Colonna_giusta_EP = lcolbase
 		else
 		print &quot;questo?&quot;
 			Colonna_giusta_EP =	&quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; 
 	end if
 	if lcolbase = &quot;&quot; then
 	&apos;		Colonna_giusta_EP = lcolbase
 	&apos;	else
 	print &quot;oppure quest&apos;altro&quot;
 			Colonna_giusta_EP =	&quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; 
 			print &quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; 
 	end if

end Function

Global codice_da_cercare as String
Sub cerca_in_elenco
On Error GoTo fine:
	osheet = thisComponent.CurrentController.ActiveSheet
	lrow = range2cell
	Select Case oSheet.Name
		Case &quot;COMPUTO&quot;, &quot;CONTABILITA&quot;, &quot;VARIANTE&quot;
			sStRange = Circoscrive_Voce_Computo_Att (lrow)
			With sStRange.RangeAddress
		 		lRow = .StartRow+1
			End With
		&apos;	Print oSheet.getCellByPosition(1,lRow).String
			codice_da_cercare = oSheet.getCellByPosition(1,lRow).String
		&apos;	ScriptPy(&quot;pyleeno.py&quot;,&quot;_gotoSheet&quot;,&quot;Elenco Prezzi&quot;)
			
	If codice_da_cercare = &quot;Cod. Art.?&quot;  Then Exit Sub
	If codice_da_cercare &lt;&gt; &quot;&quot; Then
	&apos;	Print codice_da_cercare
		oSheet = ThisComponent.Sheets.getByName(&quot;Elenco Prezzi&quot;)
		oCell=uFindString(codice_da_cercare, oSheet)
		ThisComponent.CurrentController.Select(oCell)
		ThisComponent.CurrentController.setFirstVisibleRow(oCell.RangeAddress.StartRow)
	EndIf
		Case &quot;Elenco Prezzi&quot;
		&apos;	Print oSheet.getCellByPosition(1,lRow).String
			codice_da_cercare = oSheet.getCellByPosition(0,lRow).String
		oSheet = ThisComponent.Sheets.getByName(&quot;Analisi di Prezzo&quot;)

		oCell=uFindString(codice_da_cercare, oSheet)
		ThisComponent.CurrentController.Select(oCell)
		ThisComponent.CurrentController.setFirstVisibleRow(oCell.RangeAddress.StartRow)
&apos;			ScriptPy(&quot;pyleeno.py&quot;,&quot;_gotoSheet&quot;,&quot;Analisi di Prezzo&quot;)
	End Select
fine:
End Sub

Function ultima_voce__
	oSheet = thisComponent.CurrentController.ActiveSheet
	Dim test As Long
If NOT GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;) Then GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;) 
	test = getlastusedrow(osheet)
	
	Select Case oSheet.Name
		Case &quot;Elenco Prezzi&quot;
			stile = &quot;EP-aS&quot;
		Case &quot;Analisi di Prezzo&quot;
			stile = &quot;An-sfondo-basso Att End&quot;
		Case &quot;COMPUTO&quot;, &quot;VARIANTE&quot;
			stile = &quot;Comp End Attributo&quot;
		Case &quot;CONTABILITA&quot;
			stile = &quot;Comp End Attributo_R&quot;
	End Select
	For i = test To 0 Step -1
		If oSheet.getCellByPosition(0, i).cellstyle = stile Then
			ultima_voce = i
			Exit Function
		EndIf 
	next
End Function

Function ultima_voce
	oSheet = thisComponent.CurrentController.ActiveSheet
    nRow = getlastusedrow(oSheet)
    For n = nRow To 0 Step -1
    	test = oSheet.getCellByPosition(0, n).CellStyle
    	Select Case test
    	Case &quot;EP-aS&quot;, &quot;An-sfondo-basso Att End&quot;, &quot;Comp End Attributo&quot;, &quot;Comp End Attributo_R&quot;, &quot;comp Int_colonna&quot;, &quot;comp Int_colonna_R_prima&quot;
    		ultima_voce = n
			Exit Function
		End Select
	Next

End Function

Sub filtra_codice
	ScriptPy(&quot;pyleeno.py&quot;,&quot;filtra_codice&quot;)
End Sub


Sub nuova_struttura
	chiudi_dialoghi
	Togli_Struttura
&apos;ThisComponent.enableAutomaticCalculation(False)
	Dim oCRA As New com.sun.star.table.CellRangeAddress
	osheet = ThisComponent.currentController.activeSheet
	lRow = range2cell
	sStRange = Circoscrive_Voce_Computo_Att (lRow)
	With sStRange.RangeAddress
		sopra =.StartRow
		sotto =.EndRow
	End With
	codice = osheet.getCellByPosition (1, sopra+1).String
	iSheet = oSheet.RangeAddress.sheet &apos; index della sheet
	oCRA.Sheet =iSheet
	test = ultima_voce

	For n = 3 To ultima_voce
		While IsNull (Circoscrive_Voce_Computo_Att (n))
			n=n+1
		Wend
		
		sStRange = Circoscrive_Voce_Computo_Att (n)
		
		With sStRange.RangeAddress
			sopra =.StartRow+2
			sotto =.EndRow-1
		End With
		
			oCRA.StartRow = sopra&apos;inizio_gruppo
			oCRA.EndRow = sotto
			oSheet.group(oCRA,1)
	&apos;		oSheet.getCellRangeByposition(0, sopra, 0, sotto).Rows.IsVisible=false &apos; nascondi colonne
	&apos;		ThisComponent.CurrentController.Select(oSheet.getCellRangeByPosition(0, sopra, 0, sotto))
			
	&apos;		Raggruppa_righe
			n = sotto+1
	Next n
&apos;Exit Sub 
		ThisComponent.CurrentController.setFirstVisibleRow(inizio_voce(lrow))
&apos;GoTo salta:
	For n = 3 To test
		If osheet.getCellByPosition (0, n).cellstyle = &quot;Livello-1-scritta&quot; Then
			sopra = n +1
	&apos;		test =1
		Exit For
		EndIf
	Next
&apos;	Print sopra
	For n = sopra To test
&apos;		If test =1 Then
			oCRA.StartRow = sopra&apos;inizio_gruppo
			If osheet.getCellByPosition (0, n).cellstyle = &quot;Livello-1-scritta&quot; Or n = test Then
				oCRA.EndRow = n - 1
				oSheet.group(oCRA,1)
				sopra = n +1
			EndIf 
&apos;		EndIf
	Next

	For n = 3 To test
		If osheet.getCellByPosition (0, n).cellstyle = &quot;livello2 valuta&quot; Then
			sopra = n +1
	&apos;		test =1
		Exit For
		EndIf
	Next
&apos;	Print sopra
	For n = sopra To test
&apos;		If test =1 Then
			oCRA.StartRow = sopra&apos;inizio_gruppo
			If osheet.getCellByPosition (0, n).cellstyle = &quot;livello2 valuta&quot; Or osheet.getCellByPosition (0, n).cellstyle = &quot;Livello-1-scritta&quot; Or n = test Then
				oCRA.EndRow = n - 1
				oSheet.group(oCRA,1)
				sopra = n +1
			EndIf 
&apos;		EndIf
	Next
salta:
&apos;ThisComponent.enableAutomaticCalculation(True)
	msgbox (&quot;Ho fatto!&quot; &amp; CHR$(10) _
			&amp; &quot;Grazie per l&apos;attesa.&quot;, 64, &quot;Operazione completata&quot;)
End Sub
</script:module>