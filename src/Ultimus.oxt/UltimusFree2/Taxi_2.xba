<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Taxi_2" script:language="StarBasic">rem ***** BASIC *****
&apos;_______________________________________________________________________________________ 		
&apos; LeenO - Computo Metrico
&apos; Template assistito per la compilazione di Computi Metrici Estimativi 				
&apos;..._ Copyright (C) Bartolomeo Aimar - Giuseppe Vizziello - supporto@leeno.org
&apos; Licenza LGPL  2.1 https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html					
&apos; Il codice contenuto in questo modulo è parte integrante dell&apos;estensione LeenO 
&apos; Vi sarò grato se vorrete segnalarmi i malfunzionamenti (veri o presunti)
&apos; Sono inoltre graditi suggerimenti in merito alle gestione della Contabilità Lavori e 
&apos; per l&apos;ottimizzazione del codice.
&apos;_______________________________________________________________________________________
&apos; questo gruppo di macro (derivato da Taxi) DOVREBBE serviree per trasferire una o più analisi
&apos;global aSheetNames


Function S_AN_ (Tag as string,lrowA as long) &apos; cerca nelle Analisi
&apos;(versione modificata per trasferire solo le analisi)
&apos;print &quot;S_AN&quot;
	print &quot; se leggi questo messaggio informami specificando: Taxi_2.S_AN_1 e la macro che stavi eseguendo | grazie! (Bart)&quot;
	&apos;	Dim lrowA as long 
			 sString$ = xC
&apos;		print &quot;arriva &quot; &amp; lrowA
			 oSheetAnalisi = ThisComponent.Sheets.getByName(&quot;Analisi di Prezzo&quot;)
&apos;		
		
			 oCell = oSheetAnalisi.GetCellByPosition( 0, lrowA)			

		 	 xD = oCell.string
		&apos;	S_EP (xD, Tag) &apos; tagga la sigla della Analisi
			&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
			Uscita_forzata = S_EP (xD, Tag) 
			&apos;mirko		
 		 &apos;	print &quot;eseguito S_EP con questo risultato :&quot; &amp; Uscita_forzata
 		 	If Uscita_forzata = &quot;Esci1&quot; then
 		 				S_AN_ = &quot;Esci&quot;
						exit function
			end if
			
			
			lrowA = lrowA +1	
			 oCell = oSheetAnalisi.GetCellByPosition( 0, lrowA)
&apos;				oCellT= oSheetAnalisi.GetCellByPosition( 8, lrowA-1)
&apos;				oCellT.string = &quot;usata&quot;
			xA = oSheetAnalisi.GetCellByPosition( 0, lrowA ).string
			Do while xA = &quot;&quot; &apos; mi sposto in basso fino al marcatore fine analisi ----	(per trovare la fine della voce)				
 		 			 lrowA=lrowA+1
 		 		&apos;	 xA = oCell.string
 			 		 xA = oSheetAnalisi.GetCellByPosition( 0, lrowA ).string
 			 	&apos;	 ThisComponent.CurrentController.Select(oSheetAnalisi.GetCellByPosition( 0, lrowA ))&apos;debug
 			 	&apos;	 print &quot;1&quot;&apos;xA = oCell.string &apos;debug
 			Loop 
 		&apos;	ThisComponent.CurrentController.Select(oCell)&apos; debug
 		&apos;	print &quot;2222222222&quot;
			if xA &lt;&gt; &quot;----&quot; then &apos; se esite prosegue, altrimenti errore!!!
			&apos;	oCell =oSheetAnalisi.GetCellByPosition( 0, lrowA+1 )
				&apos;	oCelle=thisComponent.getCurrentSelection().getCellAddress() 
			&apos;	lrow=oCelle.Row 
	 			oCell = oSheetAnalisi.GetCellByPosition( 0, lrowA -2 )
	 			ThisComponent.CurrentController.Select(oCell) 
				Msgbox &quot;ho l&apos;impressione che manchi il marcatore di fine Voce di Analisi (----)&quot;&amp; CHR$(10)_
				&amp; &quot;interrompo la macro in modo che tu possa provvedere a sistemare la voce!&quot;
				Uscita_forzata = &quot;Esci&quot;
			&apos;	print &quot;dovrei uscire&quot;
				exit function
			end if
			
 			 oCell = oSheetAnalisi.GetCellByPosition( 4, lrowA )
	&apos;		 ThisComponent.CurrentController.Select(oCell)&apos; solo per debug
	&apos;		 print
	&apos;------------------------------
 			 xA = oCell.string	
			Do while xA &lt;&gt; &quot;rif. El. Prezzi&quot; &apos;cicla in singola analisi
 	 		 	xD = oCell.string &apos; sigla da tornare a taggare in Elenco
&apos; 	 		 
 	 			 lrowA=lrowA-1 	
 		 	 	oCell =oSheetAnalisi.GetCellByPosition( 4, lrowA )
		&apos; 	 ThisComponent.CurrentController.Select(ocell)&apos; solo per debug
		 &apos;	 print &quot;prrrr&quot;
	 		 	 xA = oCell.string
	 		 	 &apos;xA = xB
 			 	&apos; print xB
 			 	If xA = &quot;&quot; Then &apos; caso di Utli impresa
 			 		goto fine_loop	
 			 	end if
 			 	 If xA = &quot;rif. El. Prezzi&quot; then
 			 	 	exit Function
 			 	 end if
 			 	 	xD = oCell.string &apos; sigla da tornare a taggare in Elenco
 		&apos;	print xd	 		 
 					S_EP (xD, Tag)
				fine_loop:	
 			&apos;	do while xD = &quot;&quot; 
 			 &apos;	 	lrowA=lrowA-1 	
 			 &apos;	 	print &quot;loop strano &quot;+ lrowA
 		 	 &apos;		oCell =oSheetAnalisi.GetCellByPosition( 4, lrowA)
 		 	 &apos;		xD = oCell.string
 			 &apos;	loop
 			
				oCell =oSheetAnalisi.GetCellByPosition( 4, lrowA )
&apos;			 	 ThisComponent.CurrentController.Select(ocell)&apos; solo per debug
	 		 	 xA = oCell.string
	 		Loop 
END Function

Function registra_conf_hide_sheet &apos;in lavorazione
	oSheets = ThisComponent.getSheets()
	xray oSheets
	aSheetNames = oSheets.getElementNames()
end function
</script:module>