<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Cerca_Rior_2" script:language="StarBasic">rem ***** BASIC *****
&apos;_______________________________________________________________________________________ 		
&apos; LeenO - Computo Metrico
&apos; Template assistito per la compilazione di Computi Metrici Estimativi 				
&apos;..._ Copyright (C) Bartolomeo Aimar - Giuseppe Vizziello - supporto@leeno.org
&apos; Licenza LGPL  2.1 https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html					
&apos; Il codice contenuto in questo modulo è parte integrante dell&apos;estensione LeenO 
&apos; Vi sarò grato se vorrete segnalarmi i malfunzionamenti (veri o presunti)
&apos; Sono inoltre graditi suggerimenti in merito alle gestione della Contabilità Lavori e 
&apos; per l&apos;ottimizzazione del codice.
&apos;_______________________________________________________________________________________

sub modifiche_risibili &apos; modifica le diciture ed i relativi stili di cella
													&apos; in fondo al computo
	oSheet = ThisComponent.Sheets.getByName(&quot;COMPUTO&quot;) 
	sCerca = &quot;Ctrl-Maiusc-F )&quot;
	oCell = uFindString(sCerca, oSheet )

	If NOT IsNull(oCell) then
		ocell.HoriJustify = com.sun.star.table.CellHoriJustify.RIGHT
		oCell.cellstyle = &quot;Comp_No print dx&quot;
		oCell.string = &quot;Ctrl-Maiusc-O (O come Oscar)&quot;
	end if

	sCerca = &quot;( Per trovare i &quot; &amp; CHR$(10) &amp; &quot;valori N/D esegui &quot;
	oCell = uFindString(sCerca, oSheet )
	If NOT IsNull(oCell) then
		ocell.HoriJustify = com.sun.star.table.CellHoriJustify.RIGHT	
		oCell.cellstyle = &quot;Comp_No print dx&quot;
		oCell.string = &quot; Per trovare i valori N/D esegui &quot;
	end if

	sCerca = &quot;Se la cella sopra riporta un valore N/D significa che una o più voci non sono a posto&quot;
	oCell = uFindString(sCerca, oSheet )
	If NOT IsNull(oCell) then
		ocell.HoriJustify = com.sun.star.table.CellHoriJustify.RIGHT
		oCell.cellstyle = &quot;Comp_No print dx&quot;
		oCell.string = 	&quot;Se la cella sopra riporta un valore N/D &quot; &amp; CHR$(10) &amp; &quot;Significa che una o più voci non sono a posto&quot;
	end if

end sub



Function TrovaSTR(sTrova, oSheetC) As Variant &apos; richiamata da diverse cose
									&apos;cerca solo nella prima colonna
 Dim nCurCol As Integer
 Dim nCurRow As Integer
 Dim nEndCol As Integer
 Dim nEndRow As Integer
 Dim oCell As Object
 Dim oCursor As Object
 Dim aAddress As Variant
 Dim sFind As String
 Dim oDescriptor As Object, oFound As Object, oRange As Object
 
 if oSheetC.name = &quot;Elenco Prezzi&quot; then
			lcolbase = Colonna_giusta_EP(osheetC) 

			If lcolbase =	&quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot; then
					TrovaSTR= &quot;ERRORE! Nell&apos;E.P. puoi aggiungere Max 3 colonne!&quot;
					exit function
 			&apos;	else
				&apos;	lcolbase = 0
			end if
 end if
 &apos;print lcolbase
 oCell = oSheetC.GetCellbyPosition(lcolbase + 0, 0 )
 oCursor = oSheetC.createCursorByRange(oCell)
 oCursor.GotoEndOfUsedArea(True)
 aAddress = oCursor.RangeAddress
 nEndRow = aAddress.EndRow
 nEndCol = aAddress.EndColumn
 oRange = oSheetC.getCellRangeByPosition(lcolbase +0,nEndCol,lcolbase +0,nEndRow)
 oRange = oSheetC.getCellRangeByPosition(lcolbase +0,0,lcolbase +0,nEndRow)
 oDescriptor=oRange.createSearchDescriptor() &apos;&apos;&apos;
 With oDescriptor 
 	.SearchWords = True &apos; bWholeWord
 	.SearchBackwards=False 
 	.SearchByRow=False 
 	.SearchCaseSensitive=False &apos;True 
 	.SearchRegularExpression=False 
 	.SearchSimilarity=False 
 	.SearchString=sTrova &apos;LTrim(Str(Number)) 
 	.SearchStyles=False 
 	.SearchType=0 &apos; Söker i cellvärden. 0=Söker i formler. .SearchWords=True 
 End with

 oFound=oRange.findFirst(oDescriptor) 
 TrovaSTR = oFound&apos;.string
 &apos; xray ofound
 goto fine
 TrovaSTR = oCell.string
&apos;print nEndRow
 For nCurCol = lcolbase +0 To nEndCol &apos;Go through the range column by column,
 For nCurRow = lcolbase +0 To nEndRow &apos;row by row.
 oCell = oSheetC.GetCellByPosition( nCurCol, nCurRow )
 sFind = oCell.String &apos;Get cell contents.
 If sFind = sTrova then
 		 TrovaSTR = oCell
 	 Exit Function
 &apos; else 
 &apos;	TrovaSTR = &quot;nulla&quot;
 End If
 Next
 Next
 fine:
End Function


Sub Scrivi_orfani(sCodOrfano as string)
	Doc = thisComponent
	If thisComponent.Sheets.hasByName(&quot;Orfani&quot;) Then &apos; se la sheet esiste
		thisComponent.Sheets.removebyname(&quot;Orfani&quot;) &apos; la cancella
	end if
	thisComponent.Sheets.insertNewByName(&quot;Orfani&quot;,2,0)
	oSheet = thisComponent.Sheets.GetByName(&quot;Orfani&quot;) &apos;recuperiamo la tabella
 oDoc = ThisComponent
 &apos; oAree=oDoc.NamedRanges&apos;
 &apos;&apos;&apos;&apos; oNomiArea() = oAree.ElementNames()
 &apos; n = oAree.Count - 1
&apos; For i = 0 to n &apos; elimino i nomi fino ad elenco_prezzi (by Marco Caresia)
 &apos; sNome = ThisComponent.NamedRanges.getByIndex(i).Name
 &apos; sRange = ThisComponent.NamedRanges.getByIndex(i).Content 
 &apos;	lrow = 1 	
	oSheet.GetCellByPosition( 0 , lrow).string = &quot;codici NON trovati&quot;
	oSheet.GetCellByPosition( 0 , lrow).CellStyle = &quot;EP-aS&quot;
	oCell = oSheet.GetCellbyPosition( 0, 1 )
	oCursor = oSheet.createCursorByRange(oCell)
	oCursor.GotoEndOfUsedArea(True)
	aAddress = oCursor.RangeAddress
 	nEndRow = aAddress.EndRow
	oSheet.GetCellByPosition( 0 , nEndRow+1).string = sCodOrfano
 oSheet.GetCellByPosition( 0 , nEndRow+1).CellStyle = &quot;EP-aS&quot;
End sub

Sub Search_replace (oSheet as object, sCerca as string, sSostituisci as string)
	Dim Doc As Object
	Dim Sheet As Object
	Dim ReplaceDescriptor As Object
	Dim I As Integer
	Doc = StarDesktop.CurrentComponent
	ReplaceDescriptor = oSheet.createReplaceDescriptor()
	ReplaceDescriptor.SearchString = sCerca
	ReplaceDescriptor.ReplaceString = sSostituisci
	oSheet.ReplaceAll(ReplaceDescriptor) 
End Sub

Sub Search_replace_doc &apos;cerca in tutto il foglio
	Dim Doc As Object
	Dim Sheet As Object
	Dim ReplaceDescriptor As Object
	Dim I As Integer
	Doc = StarDesktop.CurrentComponent
	Sheet = thisComponent.CurrentController.ActiveSheet
	&apos;Sheet = Doc.Sheets(0)
	&apos;xray sheet
	ReplaceDescriptor = Sheet.createReplaceDescriptor()
	ReplaceDescriptor.SearchString = &quot;TOS15_&quot;
	ReplaceDescriptor.ReplaceString = &quot;&quot;
&apos;	For I = 0 to Doc.Sheets.Count - 1
&apos;		Sheet = Doc.Sheets(I)
		Sheet.ReplaceAll(ReplaceDescriptor) 
&apos;	Next I
End sub




sub Main_cerca_sostituisci(sSheetNome as string, sCerca as string, sSost as string) &apos; macro registrata con il reg di paolom ma ancora da sistemare
&apos;cerca/sostitisce nel documento (NON FUNZIONA)
&apos; Recorded by 
&apos; Date: Wed Dec 8 11:44:54 2010

	&apos; get access to the document
	oDocumentModel = ThisComponent
	oDocumentView = oDocumentModel.getCurrentController()
	oDocumentFrame = oDocumentView.Frame
	oDocumentFrameNome = oDocumentView.Frame.name
	&apos; the dispatcher service is used to send commands from the 
	&apos; document frame to the underlaying office application
	oDispatcher = CreateUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	sDove = &quot;&apos;&quot; &amp; sSheetNome &amp; &quot;&apos;.A1&quot;
	
&apos;print sDove
	Dim mArgs1(0) As New com.sun.star.beans.PropertyValue
	mArgs1(0).Name = &quot;ToPoint&quot;
	mArgs1(0).Value = &quot;&apos;Analisi di Prezzo&apos;.A1&quot; &apos;sDove
&apos;	mArgs1(0).Value = &quot;&apos;Analisi di Prezzo&apos;.D391&quot;
	oDispatcher.executeDispatch(oDocumentFrame, &quot;.uno:GoToCell&quot; ,oDocumentFrameNome ,0 ,mArgs1())

	Dim mArgs2(17) As New com.sun.star.beans.PropertyValue
	mArgs2(0).Name = &quot;SearchItem.StyleFamily&quot;
	mArgs2(0).Value = 2
	mArgs2(1).Name = &quot;SearchItem.CellType&quot;
	mArgs2(1).Value = 0
	mArgs2(2).Name = &quot;SearchItem.RowDirection&quot;
	mArgs2(2).Value = True
	mArgs2(3).Name = &quot;SearchItem.AllTables&quot;
	mArgs2(3).Value = False
	mArgs2(4).Name = &quot;SearchItem.Backward&quot;
	mArgs2(4).Value = False
	mArgs2(5).Name = &quot;SearchItem.Pattern&quot;
	mArgs2(5).Value = False
	mArgs2(6).Name = &quot;SearchItem.Content&quot;
	mArgs2(6).Value = False
	mArgs2(7).Name = &quot;SearchItem.AsianOptions&quot;
	mArgs2(7).Value = False
	mArgs2(8).Name = &quot;SearchItem.AlgorithmType&quot;
	mArgs2(8).Value = 0
	mArgs2(9).Name = &quot;SearchItem.SearchFlags&quot;
	mArgs2(9).Value = 65536
	mArgs2(10).Name = &quot;SearchItem.SearchString&quot;
	mArgs2(10).Value = sCerca &apos;&quot;S1_11.42.47&quot;
	mArgs2(11).Name = &quot;SearchItem.ReplaceString&quot;
	mArgs2(11).Value = sSost&apos;&quot;S1&quot;
	mArgs2(12).Name = &quot;SearchItem.Locale&quot;
	mArgs2(12).Value = 255
	mArgs2(13).Name = &quot;SearchItem.ChangedChars&quot;
	mArgs2(13).Value = 2
	mArgs2(14).Name = &quot;SearchItem.DeletedChars&quot;
	mArgs2(14).Value = 2
	mArgs2(15).Name = &quot;SearchItem.InsertedChars&quot;
	mArgs2(15).Value = 2
	mArgs2(16).Name = &quot;SearchItem.TransliterateFlags&quot;
	mArgs2(16).Value = 1280
	mArgs2(17).Name = &quot;SearchItem.Command&quot;
	mArgs2(17).Value = 3
	oDispatcher.executeDispatch(oDocumentFrame, &quot;.uno:ExecuteSearch&quot; ,oDocumentFrameNome ,0 ,mArgs2())
&apos;	oDispatcher.executeDispatch(oDocumentFrame, &quot;.uno:ExecuteSearch&quot; ,&quot;Sorgente101208114302&quot; ,0 ,mArgs2())

&apos;	Dim mArgs3(0) As New com.sun.star.beans.PropertyValue
&apos;	mArgs3(0).Name = &quot;ToPoint&quot;
&apos;	mArgs3(0).Value = &quot;$B$388&quot;
&apos;	oDispatcher.executeDispatch(oDocumentFrame, &quot;.uno:GoToCell&quot; ,&quot;Sorgente101208114302&quot; ,0 ,mArgs3())


end sub
</script:module>