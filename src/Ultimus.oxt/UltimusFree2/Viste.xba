<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Viste" script:language="StarBasic">rem ***** BASIC *****
&apos;_______________________________________________________________________________________ 		
&apos; LeenO - Computo Metrico
&apos; Template assistito per la compilazione di Computi Metrici Estimativi 				
&apos;..._ Copyright (C) Bartolomeo Aimar - Giuseppe Vizziello - supporto@leeno.org
&apos; Licenza LGPL  2.1 https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html					
&apos; Il codice contenuto in questo modulo è parte integrante dell&apos;estensione LeenO 
&apos; Vi sarò grato se vorrete segnalarmi i malfunzionamenti (veri o presunti)
&apos; Sono inoltre graditi suggerimenti in merito alle gestione della Contabilità Lavori e 
&apos; per l&apos;ottimizzazione del codice.
&apos;_______________________________________________________________________________________

&apos;versione di VISTE per template 5C (5 colonne nelle quantità)
&apos;UF2-070108 - v
Dim oDialogScenari As Object &apos; Questa variabile va dichiarata perchè viene utilizzata
							 &apos; dalle altre sub per chiudere il dialogo
Dim oDialogScenari_2 As Object &apos; Questa variabile va dichiarata perchè viene utilizzata
							 &apos; dalle altre sub per chiudere il dialogo
Dim oDialogScenari_A As Object &apos; Questa variabile va dichiarata perchè viene utilizzata
Dim oDialogScenari_EP As Object
Dim oDialogScenari_AN As Object

Dim ComVar As Boolean
Dim ComCon As Boolean
Dim VarCon As Boolean

Sub fissa (lColFix as long, lrowFix as long, optional lcol as long, optional lrow as long)
	If isMissing (lcol) then lcol=0
	If isMissing (lrow) then lrow=8
	oSheet = ThisComponent.currentController.activeSheet
	ThisComponent.CurrentController().freezeAtPosition(lcolFix,lrowFix)
end sub

SUB mostra_tutte_le_sheet
	oDoc = ThisComponent
	oSheets = oDoc.Sheets()
	For Each oSh In oSheets
			oSh.IsVisible = True
	next
End Sub



FUNCTION DuplicaSheeTFILTROTMP(Optional sSuffix as string, Optional lnumSheet as long )&apos;Questa sub duplica 
&apos; un foglio e aggiunge un suffisso al nome
dim iNumInser as integer

 &apos; &apos;__________________________
&apos;	Clessid_lock_Start
	oDoc = thisComponent
	
	&apos;duplica la tabella del filtro se c&apos;è (versioni vecchie)
	If thisComponent.Sheets.hasByName(&quot;FiltroTMP&quot;) Then
			sNomeSheet = &quot;FiltroTMP&quot;
		else
			sNomeSheet = &quot;COMPUTO&quot; 	
	end if
&apos;	sNomeSheet = &quot;COMPUTO&quot; &apos; oDoc.currentcontroller.activesheet.name
&apos;	print sNomeSheet
&apos;	oSheet = oDoc.currentcontroller.activesheet 
	oSheet = ThisComponent.Sheets.getByName(sNomeSheet)
	
 Copy_PageStyle
	print_area= oSheet.getPrintAreas &apos; registro l&apos;area di stampa
	RepeatRows = oSheet.getTitleRows &apos;registro le righe da ripetere (intestazione colonna)

	Altezza_prima_riga=oSheet.GetCellbyPosition( 0, 0 ).getRows.Height

	PrintRepeatRows = oSheet.PrintTitleRows
	
&apos; i parametri &quot;optional&quot; devono essere verificati nell&apos;ordine in cui vengono passati!!
 sNuovoNome = &quot;Filtro_tag_&quot; &amp; sSuffix

	if isMissing (lnumSheet) then
			oDoc = ThisComponent
			iNumInser = oDoc.Sheets.count &apos; se e vuota accoda la nuova sheet in fondo
		else
			iNumInser = lnumSheet &apos; &apos; se ha un numero significa che è una chiamata da Duplica_Sheet_new_doc,
			&apos; e la posizione della sheet temporanea diventa importante perché quando questa viene eliminata
			&apos; l&apos;utente (tornando sul doc sorgente) si ritrova in primo piano quella da cui era partito 
	end if	

	if sNuovoNome = sNomeSheet then &apos; questo perché se si scegli d i salvare con lo 
		sNuovoNome = sNuovoNome &amp; &quot;_&quot; &apos; nome della sheet di origine questa verrebbe poi cancellata
	end if
&apos;	If Qui c&apos;è un problema: nel caso la sheet esista già (ma non è quella da duplicare) da un errore...
	If thisComponent.Sheets.hasByName(sNuovoNome) Then
		sMod = sNuovoNome
		Do while sNuovoNome = sMod
			sMod = inputbox (&quot;Il foglio &quot; &amp; sNewNome &amp; &quot;esiste già! Modifica il nome&quot;, ,sMod)
		loop
		sNuovoNome = sMod
	end if
	oDoc.Sheets.CopybyName(sNomeSheet,sNuovoNome, iNumInser)&apos;
	&apos; un for per vedere se c&apos;è già..
	&apos; se c&apos;è rinominare la vecchia prima di proseguire?

	oSheet = oDoc.Sheets.getByName(sNuovoNome)&apos;(sNomeSheet &amp; sSuffix)
	oDoc.CurrentController.SetActiveSheet(oSheet)&apos; Salta al foglio duplicato
	oSheet.setPrintAreas(print_area)

	oSheet.setTitleRows(RepeatRows)
	oSheet.setPrintTitleRows(PrintRepeatRows)
	&apos;	Altezza_prima_riga=oSheet.GetCellbyPosition( 0, 0 ).getRows.Height
	oSheet.GetCellbyPosition( 0, 0 ).rows.Height (Altezza_prima_riga)

	ocell = oSheet.GetCellbyPosition( 0, 3 )
	Thiscomponent.currentcontroller.select(ocell)
	DuplicaSheeTFILTROTMP=sNuovoNome
	Clessid_lock_End
END FUNCTION

Sub Registra_conf_colonne &apos;scrive la configurazione con una stringa su una sheet 
&apos; la configurazione nascondi/mostra di 30 colonne
	dim iNumCol as integer
	dim bValue as boolean
	dim sValue as string
	dim sList as string
	sList = &quot;&quot;
	oSheet = ThisComponent.currentController.activeSheet
	iNumCol = -1
	For i = 0 to 39
		iNumCol = iNumCol +1
		
		oCell = oSheet.GetCellByPosition(iNumCol, 2 )
&apos;	ThisComponent.CurrentController.Select(oCell) 
		bValue = oCell.Columns.IsVisible
		sValue = bValue
		sList = sList + left(sValue, 1)
	next
&apos;print sList
	sNomeConf = inputbox (&quot;scrivi il nome della configurazione&quot;,,&quot;Temp&quot;)
	
	oSheet = ThisComponent.Sheets.getByName(&quot;S4&quot;)
	iRow = 100
&apos;print oCell.string
	oCell = oSheet.GetCellByPosition(1 , iRow )
	Do while oCell.string &lt;&gt; &quot;&quot;
		iRow = iRow + 1
		oCell = oSheet.GetCellByPosition(1 , iRow )
	loop
&apos;iRow = iRow + 1
&apos;oCell = oSheet.GetCellByPosition(1 , iRow )	
	oCell.string = sList
	oCell = oSheet.GetCellByPosition(0 , iRow )
	oCell.string = sNomeConf
	oCell = oSheet.GetCellByPosition(1 , iRow )
	ThisComponent.CurrentController.Select(oCell) 
	msgbox &quot;La configurazione On/Off delle colonne è stata &quot;&quot;sintetizzata&quot;&quot; in questa stringa&quot;&amp; CHR$(10)_
	&amp;&quot; Usandola come parametro della funzione Viste_nuove puoi creare una nuova Configurazione o modificarne una esistente...&quot;&amp; CHR$(10)_
	&amp; &quot;Vedi il modulo &quot;&quot;Viste&quot;&quot; della libreiria UltimusFree2...&quot;
	
END SUB


SUB Prova_Scrittura &apos; scrive la configurazione leggendo 
					&apos;la stringa da una sheet (S4) nel doc corrente
dim iNumCol as integer
dim iString as integer
dim bValue as boolean
dim sValue as string
dim sString as string
dim sList1 as string

oSheet = ThisComponent.currentController.activeSheet
oSheetConf = ThisComponent.Sheets.getByName(&quot;S4&quot;)
iRow = 2
oCell = oSheetConf.GetCellByPosition(1 , iRow )
 sList1 = oCell.string 
&apos; print sList1
&apos;oCell = oSheet.GetCellByPosition(0 , iRow )
&apos;oCell.string = sNomeConf
iNumCol = -1
iString = 0
For i = 0 to 30
	iNumCol = iNumCol +1
	oCell = oSheet.GetCellByPosition(iNumCol, 2 )
	iString = iString +1
	sString = mid(sList1, iString,1)
	if sString = &quot;T&quot; then
		bValue = True
		else
		bValue = False
	end if
&apos;print &quot;colonna &quot; &amp;	iNumCol
&apos;print &quot;iString &quot; &amp;	iString
&apos;print &quot;sString &quot; &amp;	sString
&apos;print &quot;bValue &quot; &amp;	bValue
	oCell.Columns.IsVisible = bValue
	&apos;sValue = bValue
&apos;	sList = sList + left(sValue, 1)
next
END SUB

Sub Chiudi_al_tocco
&apos;oRange = ThisComponent.CurrentSelection
&apos;xray oRange


	odoc=thisComponent
	oZelle=thisComponent.getCurrentSelection()
	oSheet = ThisComponent.currentController.activeSheet	
&apos;	xray oZelle
	oRange = oSheet.getCellRangeByposition(ozelle.RangeAddress.StartColumn,0,ozelle.RangeAddress.EndColumn,0,)
	oRange.Columns.IsVisible=false
end sub


SUB massimizza &apos; Schermo intero in apertura del doc
	 ThisComponent.CurrentController.Frame.ContainerWindow.Enable = True 
	 ThisComponent.unlockControllers 	
	 document = ThisComponent.CurrentController.Frame 
 	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;) 
	 
	 rem ---------------------------------------------------------------------- 
 	dim args1(0) as new com.sun.star.beans.PropertyValue 
	 args1(0).Name = &quot;FullScreen&quot; 
	 args1(0).Value = true 
	 
	 dispatcher.executeDispatch(document, &quot;.uno:FullScreen&quot;, &quot;&quot;, 0, args1())
	 
END SUB

SUB Torna_a_schermo_normale &apos; Schermo intero in apertura del doc
	 ThisComponent.CurrentController.Frame.ContainerWindow.Enable = True 
	 ThisComponent.unlockControllers 	
	 document = ThisComponent.CurrentController.Frame 
 	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;) 
	 
	 rem ---------------------------------------------------------------------- 
 	dim args1(0) as new com.sun.star.beans.PropertyValue 
	 args1(0).Name = &quot;FullScreen&quot; 
	 args1(0).Value = False
	 
	 dispatcher.executeDispatch(document, &quot;.uno:FullScreen&quot;, &quot;&quot;, 0, args1())
	 
END SUB
</script:module>